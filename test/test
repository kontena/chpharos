#!/bin/sh

testChpharosUse() {
  chpharos use 1.0.0 > /dev/null
  version=$(pharos-cluster version | grep "pharos-cluster version")
  assertEquals "pharos-cluster version 1.0.0" "${version}"
  version=$(kubectl version --short --client)
  assertEquals "Client Version: v1.10.1" "${version}"
  chpharos use 1.2.2 > /dev/null
  version=$(pharos-cluster version | grep "pharos-cluster version")
  assertEquals "  - pharos-cluster version 1.2.2" "${version}"
  version=$(kubectl version --short --client)
  assertEquals "Client Version: v1.10.5" "${version}"

  chpharos use 0.0.0 &> /dev/null
  ret=$?
  assertFalse "setting to unknown version should return an error" $ret
}

testChpharosUseLocal() {
  [ -f ".pharos-version" ] && mv .pharos-version .tmp.pharos-version
  chpharos use --local 1.0.0 > /dev/null
  assertEquals "1.0.0" "$(cat .pharos-version)"
  chpharos use --local 1.2.2 > /dev/null
  assertEquals "1.2.2" "$(cat .pharos-version)"
  rm -f .pharos-version
  [ -f ".tmp.pharos-version" ] && mv .tmp.pharos-version .pharos-version
}

testChpharosCurrent() {
  chpharos reset

  chpharos current &> /dev/null
  ret=$?
  assertFalse "current should not bet set after reset" $ret

  chpharos use 1.0.0 > /dev/null
  assertEquals "1.0.0" "$(chpharos current --short)"
  chpharos use 1.2.2 > /dev/null
  assertEquals "1.2.2" "$(chpharos current --short)"
}

testChpharosList() {
  chpharos use 1.0.0 > /dev/null
  version=$(chpharos list | grep "1.0.0")
  assertEquals "1.0.0 (current)" "${version}"
  version=$(chpharos list | grep "1.2.2")
  assertEquals "1.2.2" "${version}"
  chpharos use 1.2.2 > /dev/null
  version=$(chpharos list | grep "1.2.2")
  assertEquals "1.2.2 (current)" "${version}"
}

testChpharosListRemote() {
  version=$(chpharos list-remote | grep "1.2.2")
  assertEquals "1.2.2 (installed)" "${version}"

  version=$(chpharos list-remote | grep "1.0.1")
  assertEquals "1.0.1" "${version}"

  chpharos list-remote | grep "1.2.0-rc.1" > /dev/null
  ret=$?
  assertFalse "rc is not listed without --pre" $ret

  chpharos list-remote --pre | grep "1.2.0-rc.1" > /dev/null
  ret=$?
  assertTrue "rc is listed with --pre" $ret
}

testChpharosAuto() {
  mkdir autotest1 &> /dev/null
  mkdir autotest2 &> /dev/null
  echo "1.0.0" > autotest1/.pharos-version
  echo "1.2.2" > autotest2/.pharos-version

  chpharos use 1.2.2 &> /dev/null

  cd autotest1
  assertEquals "version should not change when not in auto" "1.2.2" "$(chpharos current --short)"
  cd ..

  cd autotest1 && chpharos auto
  assertEquals "version in autotest1 should be 1.0.0" "1.0.0" "$(chpharos current --short)"
  cd .. && chpharos auto

  cd autotest2 && chpharos auto
  assertEquals "version in autotest2 should be 1.2.2" "1.2.2" "$(chpharos current --short)"
  cd .. && chpharos auto

  rm -rf autotest1
  rm -rf autotest2
  chpharos reset
}

testChpharosInstall() {
  [ -n "$SKIP_INSTALL" ] && return 0

  chpharos install 0.0.0 &> /dev/null
  ret=$?
  assertFalse "trying to install an unknown version should return an error" $ret

  chpharos install 1.0.1 &> /dev/null
  ret=$?
  assertTrue "installing a known version should not fail" $ret

  chpharos use 1.0.1 &> /dev/null
  assertEquals "1.0.1" "$(chpharos current --short)"

  chpharos uninstall 0.0.0 &> /dev/null
  ret=$?
  assertFalse "uninstalling an unknown version should fail" $ret

  chpharos uninstall 1.0.1 &> /dev/null
  ret=$?
  assertTrue "uninstall an installed version should not fail" $ret

  chpharos use 1.0.1 &> /dev/null
  ret=$?
  assertFalse "uninstall should make a version unknown" $ret
}

testChpharosReset() {
  chpharos use 1.2.2 > /dev/null
  local check_path
  check_path="${CHPHAROS_ROOT}/versions/1.2.2"
  assertTrue "path includes $check_path" "[[ \"$PATH\" == *\"$check_path\"* ]]"
  chpharos reset
  assertFalse "path does not include $check_path" "[[ \"$PATH\" == *\"$check_path\"* ]]"
}

testChpharosExec() {
  oPATH="${PATH}"
  PATH="$CHPHAROS_BIN:$PATH"
  assertEquals "chpharos-exec ${CHPHAROS_VERSION}" "$(chpharos-exec --version)"
  version=$(chpharos-exec 1.0.0 pharos-cluster version | grep "pharos-cluster version")
  assertEquals "pharos-cluster version 1.0.0" "${version}"
  version=$(chpharos-exec 1.0.0 kubectl version --short --client)
  assertEquals "Client Version: v1.10.1" "${version}"
  version=$(chpharos-exec 1.2.2 pharos-cluster version | grep "pharos-cluster version")
  assertEquals "  - pharos-cluster version 1.2.2" "${version}"
  version=$(chpharos-exec 1.2.2 kubectl version --short --client)
  assertEquals "Client Version: v1.10.5" "${version}"
  PATH="${oPATH}"
}

[ ! -z "${ZSH_VERSION}" ] && SHUNIT_PARENT=$0 && setopt shwordsplit

test_root=`dirname "${BASH_SOURCE[0]-$0}"`
test_root=`cd "$test_root" && pwd`

export CHPHAROS_ROOT="${test_root}/test-binaries"
export CHPHAROS_SRC="${test_root}/../share/chpharos/chpharos.sh"
export CHPHAROS_BIN="${test_root}/../bin"

echo "CHPHAROS_ROOT=${CHPHAROS_ROOT}"
echo "CHPHAROS_SRC=${CHPHAROS_SRC}"

. "${CHPHAROS_SRC}"

[ -z "$SHUNIT2" ] && SHUNIT2="$(command -v shunit2)"
. $SHUNIT2
