#!/bin/bash

#
#                                  Apache License
#                            Version 2.0, January 2004
#                         http://www.apache.org/licenses/
#
#    TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
#
#    1. Definitions.
#
#       "License" shall mean the terms and conditions for use, reproduction,
#       and distribution as defined by Sections 1 through 9 of this document.
#
#       "Licensor" shall mean the copyright owner or entity authorized by
#       the copyright owner that is granting the License.
#
#       "Legal Entity" shall mean the union of the acting entity and all
#       other entities that control, are controlled by, or are under common
#       control with that entity. For the purposes of this definition,
#       "control" means (i) the power, direct or indirect, to cause the
#       direction or management of such entity, whether by contract or
#       otherwise, or (ii) ownership of fifty percent (50%) or more of the
#       outstanding shares, or (iii) beneficial ownership of such entity.
#
#       "You" (or "Your") shall mean an individual or Legal Entity
#       exercising permissions granted by this License.
#
#       "Source" form shall mean the preferred form for making modifications,
#       including but not limited to software source code, documentation
#       source, and configuration files.
#
#       "Object" form shall mean any form resulting from mechanical
#       transformation or translation of a Source form, including but
#       not limited to compiled object code, generated documentation,
#       and conversions to other media types.
#
#       "Work" shall mean the work of authorship, whether in Source or
#       Object form, made available under the License, as indicated by a
#       copyright notice that is included in or attached to the work
#       (an example is provided in the Appendix below).
#
#       "Derivative Works" shall mean any work, whether in Source or Object
#       form, that is based on (or derived from) the Work and for which the
#       editorial revisions, annotations, elaborations, or other modifications
#       represent, as a whole, an original work of authorship. For the purposes
#       of this License, Derivative Works shall not include works that remain
#       separable from, or merely link (or bind by name) to the interfaces of,
#       the Work and Derivative Works thereof.
#
#       "Contribution" shall mean any work of authorship, including
#       the original version of the Work and any modifications or additions
#       to that Work or Derivative Works thereof, that is intentionally
#       submitted to Licensor for inclusion in the Work by the copyright owner
#       or by an individual or Legal Entity authorized to submit on behalf of
#       the copyright owner. For the purposes of this definition, "submitted"
#       means any form of electronic, verbal, or written communication sent
#       to the Licensor or its representatives, including but not limited to
#       communication on electronic mailing lists, source code control systems,
#       and issue tracking systems that are managed by, or on behalf of, the
#       Licensor for the purpose of discussing and improving the Work, but
#       excluding communication that is conspicuously marked or otherwise
#       designated in writing by the copyright owner as "Not a Contribution."
#
#       "Contributor" shall mean Licensor and any individual or Legal Entity
#       on behalf of whom a Contribution has been received by Licensor and
#       subsequently incorporated within the Work.
#
#    2. Grant of Copyright License. Subject to the terms and conditions of
#       this License, each Contributor hereby grants to You a perpetual,
#       worldwide, non-exclusive, no-charge, royalty-free, irrevocable
#       copyright license to reproduce, prepare Derivative Works of,
#       publicly display, publicly perform, sublicense, and distribute the
#       Work and such Derivative Works in Source or Object form.
#
#    3. Grant of Patent License. Subject to the terms and conditions of
#       this License, each Contributor hereby grants to You a perpetual,
#       worldwide, non-exclusive, no-charge, royalty-free, irrevocable
#       (except as stated in this section) patent license to make, have made,
#       use, offer to sell, sell, import, and otherwise transfer the Work,
#       where such license applies only to those patent claims licensable
#       by such Contributor that are necessarily infringed by their
#       Contribution(s) alone or by combination of their Contribution(s)
#       with the Work to which such Contribution(s) was submitted. If You
#       institute patent litigation against any entity (including a
#       cross-claim or counterclaim in a lawsuit) alleging that the Work
#       or a Contribution incorporated within the Work constitutes direct
#       or contributory patent infringement, then any patent licenses
#       granted to You under this License for that Work shall terminate
#       as of the date such litigation is filed.
#
#    4. Redistribution. You may reproduce and distribute copies of the
#       Work or Derivative Works thereof in any medium, with or without
#       modifications, and in Source or Object form, provided that You
#       meet the following conditions:
#
#       (a) You must give any other recipients of the Work or
#           Derivative Works a copy of this License; and
#
#       (b) You must cause any modified files to carry prominent notices
#           stating that You changed the files; and
#
#       (c) You must retain, in the Source form of any Derivative Works
#           that You distribute, all copyright, patent, trademark, and
#           attribution notices from the Source form of the Work,
#           excluding those notices that do not pertain to any part of
#           the Derivative Works; and
#
#       (d) If the Work includes a "NOTICE" text file as part of its
#           distribution, then any Derivative Works that You distribute must
#           include a readable copy of the attribution notices contained
#           within such NOTICE file, excluding those notices that do not
#           pertain to any part of the Derivative Works, in at least one
#           of the following places: within a NOTICE text file distributed
#           as part of the Derivative Works; within the Source form or
#           documentation, if provided along with the Derivative Works; or,
#           within a display generated by the Derivative Works, if and
#           wherever such third-party notices normally appear. The contents
#           of the NOTICE file are for informational purposes only and
#           do not modify the License. You may add Your own attribution
#           notices within Derivative Works that You distribute, alongside
#           or as an addendum to the NOTICE text from the Work, provided
#           that such additional attribution notices cannot be construed
#           as modifying the License.
#
#       You may add Your own copyright statement to Your modifications and
#       may provide additional or different license terms and conditions
#       for use, reproduction, or distribution of Your modifications, or
#       for any such Derivative Works as a whole, provided Your use,
#       reproduction, and distribution of the Work otherwise complies with
#       the conditions stated in this License.
#
#    5. Submission of Contributions. Unless You explicitly state otherwise,
#       any Contribution intentionally submitted for inclusion in the Work
#       by You to the Licensor shall be under the terms and conditions of
#       this License, without any additional terms or conditions.
#       Notwithstanding the above, nothing herein shall supersede or modify
#       the terms of any separate license agreement you may have executed
#       with Licensor regarding such Contributions.
#
#    6. Trademarks. This License does not grant permission to use the trade
#       names, trademarks, service marks, or product names of the Licensor,
#       except as required for reasonable and customary use in describing the
#       origin of the Work and reproducing the content of the NOTICE file.
#
#    7. Disclaimer of Warranty. Unless required by applicable law or
#       agreed to in writing, Licensor provides the Work (and each
#       Contributor provides its Contributions) on an "AS IS" BASIS,
#       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#       implied, including, without limitation, any warranties or conditions
#       of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
#       PARTICULAR PURPOSE. You are solely responsible for determining the
#       appropriateness of using or redistributing the Work and assume any
#       risks associated with Your exercise of permissions under this License.
#
#    8. Limitation of Liability. In no event and under no legal theory,
#       whether in tort (including negligence), contract, or otherwise,
#       unless required by applicable law (such as deliberate and grossly
#       negligent acts) or agreed to in writing, shall any Contributor be
#       liable to You for damages, including any direct, indirect, special,
#       incidental, or consequential damages of any character arising as a
#       result of this License or out of the use or inability to use the
#       Work (including but not limited to damages for loss of goodwill,
#       work stoppage, computer failure or malfunction, or any and all
#       other commercial damages or losses), even if such Contributor
#       has been advised of the possibility of such damages.
#
#    9. Accepting Warranty or Additional Liability. While redistributing
#       the Work or Derivative Works thereof, You may choose to offer,
#       and charge a fee for, acceptance of support, warranty, indemnity,
#       or other liability obligations and/or rights consistent with this
#       License. However, in accepting such obligations, You may act only
#       on Your own behalf and on Your sole responsibility, not on behalf
#       of any other Contributor, and only if You agree to indemnify,
#       defend, and hold each Contributor harmless for any liability
#       incurred by, or claims asserted against, such Contributor by reason
#       of your accepting any such warranty or additional liability.
#
#    END OF TERMS AND CONDITIONS
#
#    Copyright 2015 Kontena, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

set -e

PHAROS_VM_VERSION=0.1.0
PHAROS_VM_ROOT="$HOME/.pharos"
PHAROS_VM_BIN_ROOT="$PHAROS_VM_ROOT/bin"
_pharos_version_origin=""
PHAROS_CMD=$(basename $0)

function error_exit() {
  (>&2 echo "error: $1"); exit 1
}

function os() {
  if uname -s | grep -q Darwin; then
    echo "darwin"
  else
    echo "linux"
  fi
}

function cpu() {
  local uname_m=$(uname -m)
  case "${uname_m}" in
    amd64)  echo "amd64" ;;
    x86_64) echo "amd64" ;;
    *) error_exit "Unsupported processor architecture" ;;
  esac
}

function find_versionfile_ascending() {
  local current_path="$(pwd)"

  while ! [ -e "${current_path}/.pharos-version" ] && [ -n "${current_path}" ]; do
    current_path="${current_path%/*}"
  done
  [ -e "${current_path}/.pharos-version" ] && echo "${current_path}/.pharos-version"
}

function current_version() {
  if [ "${PHAROS_VERSION}" != "" ]; then
    _pharos_version_origin="PHAROS_VERSION environment variable"
    _pharos_version="${PHAROS_VERSION}"
  elif [ -f "$PWD/.pharos-version" ]; then
    _pharos_version_origin="$PWD/.pharos-version file"
    _pharos_version=$(cat .pharos-version)
  elif git rev-parse --is-inside-work-tree &> /dev/null && [ -e "$(git rev-parse --show-toplevel)/.pharos-version" ]; then
    _pharos_version_origin="git repository root .pharos-version file"
    _pharos_version=$(cat "$(git rev-parse --show-toplevel)/.pharos-version")
  else
    local ascending="$(find_versionfile_ascending)"
    if [ "${ascending}" != "" ]; then
      _pharos_version_origin="${ascending} file"
      _pharos_version=$(cat "${ascending}")
    elif [ -f "${PHAROS_VM_ROOT}/current_version" ]; then
      _pharos_version_origin="${PHAROS_VM_ROOT}/current_version file"
      _pharos_version=$(cat "${PHAROS_VM_ROOT}/current_version")
    fi
  fi
  echo "${_pharos_version}"
}

function version_path() {
  local tool=$1
  local version=$2
  echo "${PHAROS_VM_BIN_ROOT}/pharos-${tool}@${version}"
}

function version_is_installed() {
  local tool="$1"
  local version="$2"

  if [ -f "$(version_path $tool $version)" ]; then
    return 0
  else
    return 1
  fi
}

function validate_external_tools() {
  (which curl > /dev/null || which wget > /dev/null) || error_exit "curl or wget not installed"
  which shasum > /dev/null || error_exit "shasum not installed"
}

function _pharos_subcommand_--help() {
  cat <<EOF
Usage: $PHAROS_CMD [version-number] <sub-command> <sub-command-options>

$PHAROS_CMD use [--local] <version>        Set the current Kontena Pharos version
$PHAROS_CMD install [--force] <version>    Install Kontena Pharos version
$PHAROS_CMD uninstall <version>            Uninstall Kontena Pharos version
$PHAROS_CMD current                        Show the current Kontena Pharos version
$PHAROS_CMD list                           List installed Kontena Pharos versions
$PHAROS_CMD list-remote [--pre]            List remote Kontena Pharos versions available for install
$PHAROS_CMD version                        Show pharos and pharos-cluster version

$PHAROS_CMD --help                         Show this help
$PHAROS_CMD --version                      Show pharos version ${PHAROS_VM_VERSION}

$PHAROS_CMD cluster                        Manage Kontena Pharos cluster

Version selection search order:
  - version-number option
  - PHAROS_VERSION environment variable
  - .pharos-version file in the current directory
  - .pharos-version file in the current git repository root directory
  - .pharos-version file in any of the parent directories of current directory
  - .pharos/current_version in the users home directory
EOF
}

function _pharos_subcommand_--version() {
  echo "pharos ${PHAROS_VM_VERSION}"
}

function _pharos_subcommand_version() {
  _pharos_subcommand_--version
  if [ current_version != "" ]; then
    echo ""
    subcommand cluster version
  else
    echo "pharos-cluster version not selected"
  fi
}

function remote_files() {
  cat <<EOF
cluster|darwin|amd64|s|1.1.1|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.1.1/pharos-cluster-darwin-amd64|17610212|698b1da174beef222d4f3d214033c4e1ed94e29c89025af0fd856339136e614d
cluster|linux|amd64|p|1.1.1|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.1.1/pharos-cluster-linux-amd64|17610212|698b1da174beef222d4f3d214033c4e1ed94e29c89025af0fd856339136e614d
cluster|darwin|amd64|s|1.1.0|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.1.0/pharos-cluster-darwin-amd64|17610212|f56f88f3a9cd35dc23966c8b26357f4ac473a8598762ca2505b7197a223f4b2e
cluster|linux|amd64|s|1.1.0|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.1.0/pharos-cluster-linux-amd64|17610212|f56f88f3a9cd35dc23966c8b26357f4ac473a8598762ca2505b7197a223f4b2e
cluster|darwin|amd64|p|1.1.0-rc.1|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.1.0-rc.1/pharos-cluster-darwin-amd64|17610212|e48cf76dae0a166937287c5a8b6be756295226f0889bf3c3c28fb5909d2d86a7
cluster|linux|amd64|p|1.1.0-rc.1|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.1.0-rc.1/pharos-cluster-linux-amd64|17610212|e48cf76dae0a166937287c5a8b6be756295226f0889bf3c3c28fb5909d2d86a7
cluster|darwin|amd64|s|1.0.6|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.0.6/pharos-cluster-darwin-amd64|17610212|e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
cluster|linux|amd64|s|1.0.6|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.0.6/pharos-cluster-linux-amd64|17610212|e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
cluster|darwin|amd64|s|1.0.0|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.0.0/pharos-cluster-darwin-amd64|17610212|f6627a9693c63e0906a3402d6672b928ae81cd769753e136823eb08c33046f50
cluster|linux|amd64|s|1.0.0|Pharos cluster|https://github.com/kontena/pharos-cluster/releases/download/v1.0.0/pharos-cluster-linux-amd64|17610212|f6627a9693c63e0906a3402d6672b928ae81cd769753e136823eb08c33046f50
EOF
}

function pv_is_installed() {
  which pv > /dev/null
}

function download_url() {
  local current_tool="$1"
  local current_version="$2"
  local current_cpu=$(cpu)
  local current_os=$(os)

  remote_files | while IFS="|" read -r tool os cpu stable version description url size sha; do
    if [ "${os}" = "${current_os}" ] && [ "${cpu}" = "${current_cpu}" ] && [ "${tool}" = "${current_tool}" ] && [ "${version}" = "${current_version}" ]; then
      echo "${url}"
      break
    fi
  done
}

function download_size() {
  local current_url="$1"

  remote_files | while IFS="|" read -r tool os cpu stable version description url size sha; do
    if [ "${url}" = "${current_url}" ]; then
      echo "${size}"
      break
    fi
  done
}

function download_shasum() {
  local current_url="$1"

  remote_files | while IFS="|" read -r tool os cpu stable version description url size sha; do
    if [ "${url}" = "${current_url}" ]; then
      echo "${sha}"
      break
    fi
  done
}


function get_wget() {
  local url="$1"
  local destination="$2"
  local pv

  if pv_is_installed; then
    local size=$(download_size "${url}")
    (wget -O "${url}" | pv -s ${size} > "${destination}") || error_exit "installation failed"
  else
    wget -O "${url}" > "${destination}" || error_exit "installation failed"
  fi
}

function get_curl() {
  local url="$1"
  local destination="$2"

  if pv_is_installed; then
    local size=$(download_size "${url}")
    (curl -sL "${url}" | pv -s ${size} > "${destination}") || error_exit "installation failed"
  else
    curl -sL "${url}" ${pv} > "${destination}" || error_exit "installation failed"
  fi
}

function sha_verify() {
  local file_path="$1"
  local checksum="$2"
  echo "${checksum}  $file_path" | shasum -a 256 -c - &> /dev/null
}

function _pharos_subcommand_install() {
  local force

  if [ "$1" = "--force" ]; then
    force="true"
    shift
  fi

  if [ "$2" = "--force" ]; then
    force="true"
  fi

  local version="$1"
  local tool="cluster"

  if [ "$1" = "" ]; then
    error_exit "missing version: use $PHAROS_CMD install <version>"
  fi

  if [ "${version}" = "latest" ]; then
    version=$(remote_files | head -1 | cut -d "|" -f 5)
  fi

  if version_is_installed "${tool}" "${version}" && [ "${force}" != "true" ]; then
    echo "Already installed ${tool} version ${version}. Use --force to reinstall."
    exit 0
  fi

  local url=$(download_url $tool $version)

  if [ "${url}" = "" ]; then
    error_exit "version ${version} not found for ${tool}, use: $PHAROS_CMD list-remote to get a list of available versions."
  fi

  echo "Downloading from ${url}"
  local destination=$(version_path ${tool} ${version})

  mkdir -p "$PHAROS_VM_BIN_ROOT" &> /dev/null

  if which curl > /dev/null; then
    get_curl "${url}" "${destination}"
  elif which wget > /dev/null; then
    get_wget "${url}" "${destination}"
  else
    error_exit "curl or wget required for installing"
  fi

  echo "Verifying download"
  if sha_verify ${destination} $(download_shasum ${url}); then
    chmod ug+x "${destination}"
    echo "Installed ${tool} version ${version}"
  else
    rm -f "${destination}"
    error_exit "Checksum verification failed"
  fi
}

function _pharos_subcommand_uninstall() {
  local version="$1"
  local tool="cluster"

  if [ "$1" = "" ]; then
    error_exit "missing version: use $PHAROS_CMD uninstall <version>"
  fi

  if version_is_installed "${tool}" "${version}" ]; then
    rm -f $(version_path ${tool} ${version})
  else
    error_exit "not installed: ${tool} version ${version}"
  fi
}


function _pharos_subcommand_use() {
  local tool="cluster"
  local destination=""
  if [ "$1" = "--local" ]; then
    destination=$PWD/.pharos-version
    shift
  else
    destination="${PHAROS_VM_ROOT}/current_version"
    mkdir -p "${PHAROS_VM_ROOT}" &> /dev/null
  fi

  local version="$1"

  if version_is_installed "${tool}" "${version}"; then
    echo "${version}" > "${destination}"
    current_version > /dev/null
    if [ "${_pharos_version}" != "${version}" ]; then
      echo "${tool} version ${version} set as default, currently using ${_pharos_version} set via ${_pharos_version_origin}"
    else
      echo "Using ${tool} version ${version}"
    fi
  else
    error_exit "${tool} version ${version} is not installed, use: $PHAROS_CMD install ${version} to install"
  fi
}

function _pharos_subcommand_current() {
  current_version > /dev/null
  if [ "${_pharos_version}" = "" ]; then
    error_exit "no version selected"
  else
    echo "${_pharos_version} (set via ${_pharos_version_origin})"
  fi
}

function _pharos_subcommand_list-remote() {

  local current_os=$(os)
  local current_cpu=$(cpu)

  remote_files | while IFS="|" read -r tool os cpu stable version description url size sha; do
    if [ "${os}" = "${current_os}" ] && [ "${cpu}" = "${current_cpu}" ]; then
      if [ "${stable}" = "s" ] || [ "$1" = "--pre" ]; then
        printf "* %-15s %-10s %s\n" "${tool}" "${version}" "${description}"
      fi
    fi
  done
}

function _pharos_subcommand_list() {
  local found=""
  current_version > /dev/null
  for binary in ${PHAROS_VM_BIN_ROOT}/*; do
    if [ -f "$binary" ]; then
      IFS="@" read -r tool version <<< "${binary}"
      if [ "${version}" = "${_pharos_version}" ]; then
        echo "$(basename "${tool}") ${version} (current)"
      else
        echo "$(basename "${tool}") ${version}"
      fi
      found="true"
    fi
  done

  if [ "${found}" != "true" ]; then
    echo "Nothing installed"
  fi
}

function subcommand() {

  validate_external_tools

  if [[ "$1" =~ ^[0-9].*$ ]]; then
    PHAROS_VERSION=$1
    shift
  fi

  if [ "$#" -eq 0 ]; then
    eval _pharos_subcommand_--help
  elif type -t "_pharos_subcommand_$1" | grep -q 'function'; then
    local subcommand=$1
    shift
    _pharos_subcommand_$subcommand $*
  else
    current_version > /dev/null
    local version=${_pharos_version}
    local tool="$1"
    shift
    if [ "${version}" != "" ] && version_is_installed $tool $version; then
      local executable=$(version_path ${tool} ${version})
      exec "$executable" $*
    elif [ "${version}" = "" ]; then
      error_exit "version not selected, use $PHAROS_CMD --help for usage instructions."
    else
      error_exit "Unknown subcommand '$1', use $PHAROS_CMD --help for usage instructions."
    fi
  fi
}

subcommand $*
